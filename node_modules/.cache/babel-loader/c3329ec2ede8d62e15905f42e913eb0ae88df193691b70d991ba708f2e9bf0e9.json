{"ast":null,"code":"import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\";\nexport const fetchCartData = () => {\n  return async dispatch => {\n    // putting fetch data in seperate fucntion so i can have try catch block\n    const fetchData = async () => {\n      const response = await fetch('https://redux-f30bf-default-rtdb.firebaseio.com/cart.json'); // get request is default\n      if (!response.ok) {\n        throw new Error('could not fetch data ');\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartDate\n      }));\n    } catch (error) {\n      dispatch(uiActions.setNotification({\n        status: \"Error\",\n        title: \"Error!!\",\n        message: \"fetching cart data failed!\"\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.setNotification({\n      status: \"pending\",\n      title: \"sending...\",\n      message: \"Sending cart data!\"\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://redux-f30bf-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      } // put will update the existing data unlike post that will add the data in the list\n      );\n\n      if (!response.ok) {\n        //if the there was an error\n        throw new Error('sending cart data failed');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.setNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.setNotification({\n        status: \"Error\",\n        title: \"Error!!\",\n        message: \"Sending cart data failed!\"\n      }));\n    }\n  };\n};","map":{"version":3,"names":["uiActions","cartActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","cartDate","error","setNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"sources":["/Users/dev/Downloads/01-starting-project 2/src/store/cart-actions.js"],"sourcesContent":["\nimport { uiActions } from \"./ui-slice\"\nimport { cartActions } from \"./cart-slice\"\n\nexport const fetchCartData = ()=>{\n  return async (dispatch)=> {\n    // putting fetch data in seperate fucntion so i can have try catch block\n    const fetchData = async ()=>{\n      const response = await fetch('https://redux-f30bf-default-rtdb.firebaseio.com/cart.json')// get request is default\n      if (!response.ok){\n        throw new Error ('could not fetch data ')\n      }\n      const data = await response.json()\n      return data\n    }\n    try{\n      const cartData = await fetchData()\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartDate\n      }))\n\n    }catch(error){\n      dispatch(uiActions.setNotification({\n        status: \"Error\",\n        title: \"Error!!\",\n        message: \"fetching cart data failed!\"\n      }))\n    }\n\n  }\n}\nexport const sendCartData= (cart) => {\n  return async (dispatch) => {\n    dispatch(uiActions.setNotification({\n      status: \"pending\",\n      title: \"sending...\",\n      message: \"Sending cart data!\"\n    }))\n\n    const sendRequest = async() =>{\n      const response = await fetch('https://redux-f30bf-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT', body: JSON.stringify({items: cart.items, totalQuantity: cart.totalQuantity })} // put will update the existing data unlike post that will add the data in the list\n      )\n      if(!response.ok){ //if the there was an error\n        throw new Error('sending cart data failed')\n      }\n    }\n    try {\n      await sendRequest()\n      dispatch(uiActions.setNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sent cart data successfully!\"\n      }))\n    } catch(error) {\n      dispatch(uiActions.setNotification({\n        status: \"Error\",\n        title: \"Error!!\",\n        message: \"Sending cart data failed!\"\n      }))}}}\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,cAAc;AAE1C,OAAO,MAAMC,aAAa,GAAG,MAAI;EAC/B,OAAO,MAAOC,QAAQ,IAAI;IACxB;IACA,MAAMC,SAAS,GAAG,YAAU;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2D,CAAC;MACzF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAC;QACf,MAAM,IAAIC,KAAK,CAAE,uBAAuB,CAAC;MAC3C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC;IACD,IAAG;MACD,MAAME,QAAQ,GAAG,MAAMP,SAAS,EAAE;MAClCD,QAAQ,CAACF,WAAW,CAACW,WAAW,CAAC;QAC/BC,KAAK,EAAEF,QAAQ,CAACE,KAAK,IAAI,EAAE;QAC3BC,aAAa,EAAEC;MACjB,CAAC,CAAC,CAAC;IAEL,CAAC,QAAMC,KAAK,EAAC;MACXb,QAAQ,CAACH,SAAS,CAACiB,eAAe,CAAC;QACjCC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;EAEF,CAAC;AACH,CAAC;AACD,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAK;EACnC,OAAO,MAAOnB,QAAQ,IAAK;IACzBA,QAAQ,CAACH,SAAS,CAACiB,eAAe,CAAC;MACjCC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE;IACX,CAAC,CAAC,CAAC;IAEH,MAAMG,WAAW,GAAG,YAAU;MAC5B,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2D,EAAE;QACxFkB,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACd,KAAK,EAAES,IAAI,CAACT,KAAK;UAAEC,aAAa,EAAEQ,IAAI,CAACR;QAAc,CAAC;MAAC,CAAC,CAAC;MAAA,CAC/F;;MACD,IAAG,CAACT,QAAQ,CAACE,EAAE,EAAC;QAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACF,CAAC;IACD,IAAI;MACF,MAAMe,WAAW,EAAE;MACnBpB,QAAQ,CAACH,SAAS,CAACiB,eAAe,CAAC;QACjCC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAMJ,KAAK,EAAE;MACbb,QAAQ,CAACH,SAAS,CAACiB,eAAe,CAAC;QACjCC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IAAA;EAAC,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}